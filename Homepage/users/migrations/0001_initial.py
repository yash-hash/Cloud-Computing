# Generated by Django 2.2.23 on 2021-10-17 09:44

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=200)),
                ('middle_name', models.CharField(blank=True, max_length=200)),
                ('last_name', models.CharField(max_length=200)),
                ('dob', models.DateField(blank=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Others')], default='Male', max_length=6)),
                ('profession', models.CharField(choices=[('student', 'Student'), ('budding', 'Budding Entrepreneur'), ('trainer', 'Corporate Trainer'), ('faculty', 'Faculty'), ('working', 'Working Professional'), ('freelancer', 'Freelancer')], default='Student', max_length=10)),
                ('email', models.EmailField(max_length=500, unique=True)),
                ('phone', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('institute', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=200)),
                ('qualification', models.CharField(choices=[('grad', 'Graduation'), ('postgrad', 'Post Graduation'), ('phd', 'Ph.D/M.Phil')], default='', max_length=10)),
                ('specialization', models.CharField(blank=True, max_length=200, null=True)),
                ('years', models.IntegerField()),
                ('summary', models.TextField(blank=True, null=True)),
                ('profile_image', models.ImageField(blank=True, default='profiles/user-default.png', null=True, upload_to='profiles/')),
                ('address', models.CharField(max_length=500)),
                ('enrollment_status', models.BooleanField(default=False)),
                ('user_level', models.CharField(choices=[('unenrolled', 'Unenrolled'), ('beginner', 'Beginner'), ('advance', 'Advance'), ('practitioner', 'Practitioner')], default='Unenrolled', max_length=12)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_country', to='address.Country')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_state', to='address.State')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Platinum_club',
            fields=[
                ('id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='platinum_id', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='platinum_fname', to=settings.AUTH_USER_MODEL)),
                ('last_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='platinum_lname', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
